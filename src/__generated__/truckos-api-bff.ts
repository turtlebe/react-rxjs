/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/account': {
    /** Allocate new account company id */
    post: operations['createAccountCompanyId'];
  };
  '/account/company/search': {
    /**
     * Perform a system-wide Company search
     * @description Perform a system-wide Company search. This one may hit external systems in which case the 'companyId' will be empty.
     */
    get: operations['globalCompanySearch'];
  };
  '/account/{companyIdParam}': {
    /** Get account company basic details */
    get: operations['getCompanyForAccount'];
    /** Update company details */
    put: operations['updateCompanyDetails'];
  };
  '/account/{companyIdParam}/customer/{customerIdParam}': {
    /** Get Customer Company Details */
    get: operations['getCustomer'];
  };
  '/account/{companyIdParam}/customer/{customerIdParam}/contact': {
    /** Get Customer Contacts */
    get: operations['getCustomerContacts'];
    /** Create a new Customer Contact */
    post: operations['createNewPrivateCustomerContact'];
  };
  '/account/{companyIdParam}/customer/{customerIdParam}/contact/{contactIdParam}': {
    /** Get Customer Contact */
    get: operations['getCustomerContact'];
    /** Update Customer Contact */
    put: operations['updatePrivateCustomerContact'];
  };
  '/account/{companyIdParam}/logo': {
    /** Delete the current company logo */
    delete: operations['deleteCurrentCompanyLogo'];
    /** Request an upload link for the company logo */
    put: operations['requestCompanyLogoUploadUrl'];
  };
  '/account/{companyIdParam}/order': {
    /** Get the order list */
    get: operations['getOrdersList'];
    /** Create a new order */
    post: operations['createNewOrder'];
  };
  '/account/{companyIdParam}/order/{orderIdParam}': {
    /** Archive an order */
    delete: operations['archiveOrder'];
    /** Get order details */
    get: operations['getOrder'];
    /**
     * Update Order
     * @description Will update items that are allowed in the order (like order details, or the clearing type in workflow). Since the other items (such as files, workflow steps or status) are either calculated or managed by the system, any value in these will be ignored and not used. If the update is on an allowed field, but other issues (like duplicate or updating that field in the current stage of the workflow) will result in the update being rejected.
     */
    put: operations['updateOrder'];
  };
  '/account/{companyId}/customer': {
    /** Get the list of previous customer company names and ids */
    get: operations['getPreviousCustomers'];
    /** Create a new Customer */
    post: operations['createNewCustomer'];
  };
  '/account/{companyId}/order/{orderId}/document/generate': {
    /**
     * Generate a document using information in the system.
     * @description Request a document generation of a specific type of document. Each document requires different data set so preliminary data validation will be done on the API call. In case of errors api would return a 400 BAD REQUEST. It is currently possible to generate only an Order Confirmation or an Invoice.
     */
    post: operations['generateDocument'];
  };
  '/account/{companyId}/order/{orderId}/document/upload': {
    /**
     * Allocate new upload link
     * @description This endpoint allocates a new link that you can use to upload the content of a document. Afterwards when content is uploaded you need to confirm upload success by calling the PUT /account/{companyId}/order/{orderId}/document/{documentId} endpoint with the uploadId from this endpoint's response. This is related to the fact that the aforementioned link can be used multiple times to upload a file. The system wouldn't know when upload is done if the success is not confirmed by the user.
     */
    post: operations['getUploadLink'];
  };
  '/account/{companyId}/order/{orderId}/payment': {
    /**
     * Confirm payment received
     * @description Confirm that the order was payed by this Carrier's Customer. This endpoint finalizes the order and successfuly closes it.
     */
    post: operations['confirmPaymentReceived'];
  };
  '/account/{companyId}/order/{orderId}/share': {
    /**
     * Share the order summary
     * @description Share basic information such as order number, loading and unloading venues with the given recipient.
     */
    post: {
      /**
       * Share the order summary
       * @description Share basic information such as order number, loading and unloading venues with the given recipient.
       */
      parameters: {
        path: {
          companyId: string;
          orderId: string;
        };
      };
      requestBody?: {
        content: {
          'application/json': components['schemas']['OrderSharingInfo'];
        };
      };
      responses: {
        /** @description The request to share has been accepted and will be processed accordingly. */
        202: {
          content: {
            'application/json': boolean;
          };
        };
      };
    };
  };
  '/account/{companyId}/order/{orderId}/document/{documentId}': {
    /** Get a download link for the document */
    get: operations['getDownloadLink'];
    /**
     * Complete an uploadId
     * @description Confirms a document upload is finished and successful.
     */
    put: operations['confirmUpload'];
    /** Delete a document by id */
    delete: operations['deleteDocumentById'];
  };
  '/account/{companyId}/order/{orderId}/document/send': {
    /**
     * Send a document via predefined channel
     * @description Send a document with a particular type via a predefined channel. The channel highly depends on the document type itself such as an invoice could be currently sent only via email and only to the Freight Forwarder's disposition email selected on the contacts selection screen.
     */
    post: operations['sendDocumentByType'];
  };
  '/ref-data/countries': {
    /** Get country codes */
    get: operations['getCountries'];
  };
  '/ref-data/legal-forms/{countryCode}': {
    /** Get the legal forms for a country code */
    get: operations['getLegalForms'];
  };
  '/ref-data/register-authorities/{countryCode}': {
    /** Get the register authorities for a country code */
    get: operations['getRegisterAuthorities'];
  };
  '/user': {
    /** Get the user details for the logged in user */
    get: operations['getUser'];
    /** Submit new user data. Certain fields will be ignored depending on KYC/etc. */
    put: operations['updateUserData'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  headers: never;
  parameters: {
    companyIdPathParam: string;
    contactIdPathParam: string;
    customerIdPathParam: string;
    documentIdPathParam: string;
    orderIdPathParam: string;
  };
  pathItems: never;
  requestBodies: never;
  responses: {
    /** @description Cannot Fulfill Request */
    '400-RejectRequest': {
      content: {
        'application/json': components['schemas']['ClientRequestRejection'][];
      };
    };
    /** @description Not found */
    '404-NotFound': never;
    /** @description Not Allowed */
    '405-NotAllowed': never;
  };
  schemas: {
    AccountCompany: components['schemas']['CompanyBase'] & {
      accountCompanyBankDetails?: components['schemas']['AccountCompanyBankAccount'];
      accountCompanyContacts?: components['schemas']['AccountCompanyContact'][];
      accountCompanyLogo?: {
        logoUrl?: string;
        mimeType?: string;
      };
      availableFeatures?: components['schemas']['AccountFeature'][];
    };
    /**
     * @example {
     *   "iban": "DE89 3704 0044 0532 0130 00",
     *   "bic": "SSKMDEMM"
     * }
     */
    AccountCompanyBankAccount: {
      bic: string;
      iban: string;
    };
    AccountCompanyContact: components['schemas']['CompanyContactBase'] & {
      includeIn?: ('incomingBookkeeping' | 'outgoingBookkeeping' | 'publicProfile')[];
    };
    AccountFeature: {
      /** @enum {unknown} */
      functionality?: 'FACTORING_WALBING' | 'ORDER_BOOK';
      /** @enum {unknown} */
      status?:
        | 'FEATURE_AVAILABLE'
        | 'FEATURE_FORBIDDEN'
        | 'USER_NOT_APPLIED'
        | 'VERIFICATION_IN_PROGRESS'
        | 'VERIFICATION_INSUFFICIENT_DATA';
    };
    /**
     * @example {
     *   "streetAndNumber": "Luisenstr. 51",
     *   "city": "München",
     *   "postcode": "80803",
     *   "country": "Germany",
     *   "formattedAddress": "Luisenstr. 51, München, 80803, Germany"
     * }
     */
    Address: {
      addressAddOn?: string;
      city?: string;
      country?: string;
      formattedAddress?: string;
      postcode?: string;
      streetAndNumber?: string;
    };
    AutogeneratedDocument: {
      documentType: components['schemas']['DocumentTypeForAutogeneration'];
    };
    ClientRequestRejection: {
      error?: string;
      params?: {
        [key: string]: unknown | undefined;
      };
    };
    CompanyBase: components['schemas']['CompanySummary'] & {
      details: components['schemas']['CountrySpecificCompanyDetails'];
      /** @enum {unknown} */
      state?: 'DRAFT' | 'VALIDATED';
    };
    CompanyContactBase: {
      companyId?: string;
      contactDetails?: components['schemas']['CompanyContactDetails'];
      contactId?: string;
      contactName?: string;
    };
    CompanyContactDetails: {
      email?: string;
      phoneNumber?: string;
    };
    /**
     * @example {
     *   "companyId": "company112",
     *   "companyName": "Monsters Inc",
     *   "availableFeatures": [
     *     {
     *       "functionality": "ORDER_BOOK",
     *       "status": "FEATURE_AVAILABLE"
     *     },
     *     {
     *       "functionality": "FACTORING_WALBING",
     *       "status": "FEATURE_AVAILABLE"
     *     }
     *   ]
     * }
     */
    CompanySummary: {
      availableFeatures?: components['schemas']['AccountFeature'][];
      companyId: string;
      companyName: string;
    };
    CompanySummaryList: components['schemas']['CompanySummary'][];
    Country: {
      code: string;
    };
    CountrySpecificCompanyDetails: components['schemas']['GermanCompanyDetails'];
    CustomerCompany: components['schemas']['CompanyBase'] & {
      businessAbilityKnowledge?: {
        /** @example low */
        creditWorthiness?: string;
      };
      publicCompanyContacts?: components['schemas']['CustomerCompanyContact'][];
      relationshipCompanyContacts?: components['schemas']['CustomerCompanyContact'][];
    };
    CustomerCompanyContact: components['schemas']['CompanyContactBase'] & {
      useFor?: ('bookkeeping' | 'disposition')[];
    };
    /**
     * @example {
     *   "documentId": "company-123-order-321-KN22-6782-invoice-321"
     * }
     */
    DocumentBasicUploadOrGenerationResponseInfo: {
      documentId: string;
    };
    currency: string;
    /** Format: date-time */
    'date-time': string;
    'big-decimal': string;
    DocumentDownloadInfo: components['schemas']['DocumentDownloadLinkInfo'] &
      components['schemas']['DocumentMetadata'];
    /**
     * @example {
     *   "downloadLink": "/files/TruckOS-Special-Conditions-DE.pdf",
     *   "downloadLinkExpiresAt": "2023-08-11T00:00:00.000Z"
     * }
     */
    DocumentDownloadLinkInfo: {
      downloadLink?: string;
      downloadLinkExpiresAt?: components['schemas']['date-time'];
    };
    /**
     * @example {
     *   "fileName": "Proof_Of_Delivery.pdf",
     *   "mimeType": "application/pdf"
     * }
     */
    DocumentMetadata: {
      fileName?: string;
      mimeType?: string;
    };
    /**
     * @example {
     *   "documentType": "INVOICE"
     * }
     * @enum {string}
     */
    DocumentTypeForAutogeneration: 'INVOICE' | 'ORDER_CONFIRMATION';
    /** @enum {string} */
    DocumentTypeForSend: 'INVOICE' | 'ORDER_CONFIRMATION' | 'PROOF_OF_DELIVERY';
    /** @enum {unknown} */
    DocumentWorkflowAction:
      | 'delete'
      | 'DeleteOrder'
      | 'download'
      | 'FactorOrder'
      | 'RecordPayment'
      | 'SendInvoice'
      | 'SendOrderConfirmation'
      | 'SendProofOfDelivery'
      | 'ShareWithDriver'
      | 'UploadCreditNote'
      | 'UploadOrder'
      | 'UploadProofOfDelivery';
    DownloadFileLink: {
      documentMetadata?: components['schemas']['FileMetadata'];
      expires?: components['schemas']['date-time'];
      url?: string;
    };
    /**
     * @example {
     *   "fileName": "TruckOS-Special-Conditions-DE.pdf",
     *   "contentType": "application/pdf"
     * }
     */
    FileMetadata: {
      contentType?: string;
      fileName?: string;
    };
    /** @enum {unknown} */
    GeneratedDocumentType: 'INVOICE' | 'ORDER_CONFIRMATION';
    /** @enum {string} */
    OrderClearingSystem: 'credit_note' | 'invoice';
    LegalForm: {
      elfCode: string;
      name: string;
    };
    /**
     * @example {
     *   "orderId": "order123",
     *   "orderWorkflow": {
     *     "workflowSteps": [
     *       {
     *         "stepName": "OrderConfirmation",
     *         "stepStatus": "Actionable",
     *         "stepAvailableActions": [
     *           "SendOrderConfirmation"
     *         ]
     *       },
     *       {
     *         "stepName": "PODUploaded",
     *         "stepStatus": "Actionable",
     *         "stepAvailableActions": [
     *           "UploadProofOfDelivery"
     *         ]
     *       },
     *       {
     *         "stepName": "PODSent",
     *         "stepStatus": "Actionable",
     *         "stepAvailableActions": [
     *           "SendProofOfDelivery"
     *         ]
     *       },
     *       {
     *         "stepName": "InvoiceSent",
     *         "stepStatus": "Actionable",
     *         "stepAvailableActions": [
     *           "SendInvoice"
     *         ]
     *       },
     *       {
     *         "stepName": "CreditNoteReceived",
     *         "stepStatus": "Actionable",
     *         "stepAvailableActions": [
     *           "UploadCreditNote"
     *         ]
     *       },
     *       {
     *         "stepName": "PaymentReceived",
     *         "stepStatus": "Actionable",
     *         "stepAvailableActions": [
     *           "RecordPayment"
     *         ]
     *       }
     *     ]
     *   },
     *   "orderDetails": {
     *     "status": "CREATED",
     *     "clearingSystem": "invoice",
     *     "customerInformation": {
     *       "customerOrderNumber": "KN-23-2078",
     *       "customerCompany": {
     *         "companyId": "company-14251",
     *         "companyName": "DB Schenker",
     *         "kycStatus": "in_progress",
     *         "details": {
     *           "companyType": "SimpleCompany",
     *           "address": {
     *             "streetAndNumber": "Feilchenweg 3",
     *             "addressAddOn": "",
     *             "city": "Stuttgart",
     *             "postcode": "15673",
     *             "country": "DE"
     *           }
     *         }
     *       },
     *       "contacts": {
     *         "dispositionContact": {
     *           "companyId": "company-14251",
     *           "contactId": "contact-345",
     *           "contactName": "Michael Müller",
     *           "contactDetails": {
     *             "email": "michael@mueller-transporte.de",
     *             "phoneNumber": "+49-177-3680448"
     *           }
     *         },
     *         "bookkeepingContact": {
     *           "companyId": "company-14251",
     *           "contactId": "contact-345",
     *           "contactName": "Lea Schmidt",
     *           "contactDetails": {
     *             "email": "lea@mueller-transporte.de",
     *             "phoneNumber": "+49-177-3680446"
     *           }
     *         }
     *       }
     *     },
     *     "loadDetails": {
     *       "loadingTimeAndPlace": {
     *         "timeWindow": {
     *           "start": "2023-02-03T12:00:00.000Z",
     *           "end": "2023-02-03T13:00:00.000Z"
     *         },
     *         "venue": {
     *           "venueId": "venue12345",
     *           "venueName": "Südost Fruchtkontor",
     *           "address": {
     *             "streetAndNumber": "Luisenstr. 51",
     *             "city": "München",
     *             "postcode": "80803",
     *             "country": "Deutschland"
     *           }
     *         }
     *       },
     *       "unloadingTimeAndPlace": {
     *         "timeWindow": {
     *           "start": "2023-02-04T12:00:00.000Z",
     *           "end": "2023-02-04T14:00:00.000Z"
     *         },
     *         "venue": {
     *           "venueId": "venue12346",
     *           "venueName": "Nordwest Fruchtkontor",
     *           "address": {
     *             "streetAndNumber": "Große Bleichen 33",
     *             "city": "Hamburg",
     *             "postcode": "20354",
     *             "country": "Deutschland"
     *           }
     *         }
     *       },
     *       "loadDescription": "50 Paletten Bananen"
     *     },
     *     "stipulations": [
     *       "This is the first stipulation",
     *       "This is stipulation 2"
     *     ],
     *     "serviceAgreementDetails": {
     *       "paymentTermDays": 45,
     *       "vatRate": 0.19,
     *       "currency": "EUR",
     *       "services": [
     *         {
     *           "service": "Freight transport",
     *           "netAmount": 1003.6
     *         },
     *         {
     *           "service": "20x Pallets",
     *           "netAmount": 200
     *         }
     *       ]
     *     }
     *   },
     *   "documentDetails": [
     *     {
     *       "documentId": "doc-21352",
     *       "documentType": "Order",
     *       "documentActions": [
     *         "download",
     *         "delete"
     *       ],
     *       "fileMetadata": {
     *         "fileName": "Order_Confirmation_Wolfrum_2022-283.pdf",
     *         "contentType": "pdf"
     *       }
     *     },
     *     {
     *       "documentId": "",
     *       "documentType": "OrderConfirmation",
     *       "documentActions": [
     *         "SendOrderConfirmation"
     *       ],
     *       "fileMetadata": {
     *         "fileName": "",
     *         "contentType": ""
     *       }
     *     },
     *     {
     *       "documentId": "doc-21353",
     *       "documentType": "ProofOfDelivery",
     *       "documentActions": [
     *         "UploadProofOfDelivery"
     *       ],
     *       "fileMetadata": {
     *         "fileName": "Order_Confirmation_Wolfrum_2022-283.pdf",
     *         "contentType": "pdf"
     *       }
     *     },
     *     {
     *       "documentId": "doc-21354",
     *       "documentType": "Invoice",
     *       "documentActions": [
     *         "UploadProofOfDelivery"
     *       ],
     *       "fileMetadata": {
     *         "fileName": "Order_Confirmation_Wolfrum_2022-283.pdf",
     *         "contentType": "pdf"
     *       }
     *     }
     *   ],
     *   "workflowAvailableActions": [
     *     "SendOrderConfirmation",
     *     "UploadProofOfDelivery",
     *     "ShareWithDriver",
     *     "DeleteOrder"
     *   ]
     * }
     */
    Order: {
      documentDetails?: components['schemas']['OrderDocumentDetails'][];
      orderDetails?: components['schemas']['OrderDetails'];
      orderId?: string;
      orderVersion?: number;
      orderWorkflow?: components['schemas']['OrderWorkflowDetails'];
      workflowAvailableActions?: components['schemas']['OrderWorkflowActions'];
    };
    OrderDocumentDetails: {
      documentActions?: components['schemas']['DocumentWorkflowAction'][];
      documentId?: string;
      /** @enum {unknown} */
      documentType?: 'CreditNote' | 'Invoice' | 'Order' | 'OrderConfirmation' | 'ProofOfDelivery';
      fileMetadata?: components['schemas']['FileMetadata'];
    };
    OrderCustomerInformation: {
      contacts?: {
        bookkeepingContact?: components['schemas']['CustomerCompanyContact'];
        dispositionContact?: components['schemas']['CustomerCompanyContact'];
      };
      customerCompany?: components['schemas']['CustomerCompany'];
      customerOrderNumber?: string;
    };
    OrderDetails: {
      clearingSystem?: components['schemas']['OrderClearingSystem'];
      customerInformation: components['schemas']['OrderCustomerInformation'];
      loadDetails?: components['schemas']['OrderLoadDetails'];
      serviceAgreementDetails?: components['schemas']['OrderServiceAgreementDetails'];
      status?: components['schemas']['OrderStatus'];
      stipulations?: string[];
    };
    /**
     * @example {
     *   "paymentReceivedOn": "2023-07-23"
     * }
     */
    OrderPaymentReceiptInfo: {
      /** Format: date */
      paymentReceivedOn: string;
    };
    OrderLoadDetails: {
      loadDescription?: string;
      loadingTimeAndPlace?: components['schemas']['OrderLoadTimeAndPlace'];
      unloadingTimeAndPlace?: components['schemas']['OrderLoadTimeAndPlace'];
    };
    OrderLoadTimeAndPlace: {
      timeWindow?: components['schemas']['TimeWindow'];
      venue?: components['schemas']['Venue'];
    };
    /** @enum {string} */
    OrderStatus:
      | 'ARCHIVED'
      | 'CREATED'
      | 'DELIVERED'
      | 'IN_COLLECTION'
      | 'OVERDUE'
      | 'PAID'
      | 'WAITING_FOR_PAYMENT'
      | 'WRITEOFF';
    OrderServiceAgreementDetails: {
      currency?: components['schemas']['currency'];
      paymentTermDays?: number;
      services?: {
        netAmount: number;
        service: string;
      }[];
      vatRate?: number;
    };
    /**
     * @example {
     *   "channel": "EMAIL",
     *   "recipient": "foo@bar.de"
     * }
     */
    OrderSharingInfo: {
      /** @enum {string} */
      channel: 'EMAIL';
      recipient: string;
    };
    OrderWorkflowActions: components['schemas']['OrderWorkflowAction'][];
    OrderSummary: {
      amount?: components['schemas']['big-decimal'];
      clearingSystem?: components['schemas']['OrderClearingSystem'];
      currency?: components['schemas']['currency'];
      customerName?: string;
      deliveryDate?: components['schemas']['date-time'];
      orderId: string;
      sortIndex?: number;
      status?: components['schemas']['OrderStatus'];
      workflowAvailableActions?: components['schemas']['OrderWorkflowActions'];
    };
    /** @enum {unknown} */
    OrderWorkflowAction:
      | 'DeleteOrder'
      | 'FactorOrder'
      | 'RecordPayment'
      | 'SendInvoice'
      | 'SendOrderConfirmation'
      | 'SendProofOfDelivery'
      | 'ShareWithDriver'
      | 'UploadCreditNote'
      | 'UploadOrder'
      | 'UploadProofOfDelivery';
    RegisterAuthority: {
      name: string;
      registerAuthorityCode: string;
      /** @enum {string} */
      registrationDocumentRequirement: 'OPTIONAL' | 'REQUIRED';
      /** @enum {string} */
      registrationNumberRequirement: 'OPTIONAL' | 'REQUIRED';
    };
    /** @description Current Order Workflow details and status */
    OrderWorkflowDetails: {
      workflowSteps?: components['schemas']['OrderWorkflowStep'][];
    };
    OrderWorkflowStep: {
      stepAvailableActions?: components['schemas']['OrderWorkflowActions'];
      stepCompletionDate?: components['schemas']['date-time'];
      /** @enum {unknown} */
      stepName?:
        | 'CreditNoteReceived'
        | 'InvoiceSent'
        | 'OrderConfirmation'
        | 'OrderUploaded'
        | 'PaymentReceived'
        | 'PODSent'
        | 'PODUploaded'
        | 'SentToCollections'
        | 'WrittenOff';
      /** @enum {unknown} */
      stepStatus?: 'Actionable' | 'Complete' | 'NotReady' | 'Skipped' | 'Warning';
    };
    /**
     * @example {
     *   "url": "https://truckos-dev-data-documentsbucket9ec9deb9-1dht08po0ke8p.s3.eu-west-1.amazonaws.com/local-dev/saintf/ui/uploads/b05bedf7-f20b-4a0a-9c43-876037f1cda0?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIA2EJ4VQTM7BGDS6CJ%2F20230301%2Feu-west-1%2Fs3%2Faws4_request&X-Amz-Date=20230301T182802Z&X-Amz-Expires=259200&X-Amz-Signature=fcc168beb97a8223fb509684120489feeb15ef9ffbf4daff940c5c5e615e58be&X-Amz-SignedHeaders=host&x-id=PutObject",
     *   "uploadId": "document-123",
     *   "expires": "2023-03-04T18:28:02.000Z"
     * }
     */
    UploadFileLink: {
      expires?: components['schemas']['date-time'];
      uploadId?: string;
      url?: string;
    };
    /**
     * @example {
     *   "documentType": "PROOF_OF_DELIVERY"
     * }
     */
    SendDocument: {
      documentType: components['schemas']['DocumentTypeForSend'];
    };
    /**
     * @example {
     *   "start": "2023-01-15T18:00:00.123Z",
     *   "end": "2023-01-18T18:00:00.123Z"
     * }
     */
    TimeWindow: {
      end?: components['schemas']['date-time'];
      start: components['schemas']['date-time'];
    };
    /** @enum {unknown} */
    UploadableDocumentTypes: 'CREDIT_NOTE' | 'ORDER_DETAILS' | 'PROOF_OF_DELIVERY';
    GermanCompanyDetails: {
      address?: components['schemas']['Address'];
      commercialRegisterNumber?: string;
      companyType: string;
      legalForm?: string;
      registrationAuthority?: string;
      taxId?: string;
      vatId?: string;
    };
    User: components['schemas']['UserProfile'] & {
      companies: components['schemas']['CompanySummary'][];
    };
    UserProfile: {
      avatarUrl?: string;
      email?: string;
      firstName: string;
      lastName: string;
      /** @enum {string} */
      locale: 'de-DE' | 'en-US';
      /** @enum {string} */
      profileStatus?: 'COMPLETE' | 'INCOMPLETE';
      userId?: string;
    };
    /**
     * @example {
     *   "venueId": "venue12345",
     *   "venueName": "Südost Fruchtkontor",
     *   "address": {
     *     "streetAndNumber": "Luisenstr. 51",
     *     "city": "München",
     *     "postcode": "80803",
     *     "country": "Germany"
     *   }
     * }
     */
    Venue: {
      address?: components['schemas']['Address'];
      venueId?: string;
      venueName?: string;
    };
  };
}

export type external = Record<string, never>;

export interface operations {
  archiveOrder: {
    /** Archive an order */
    parameters: {
      /** @description Company id */
      /** @description Order id */
      path: {
        companyIdParam: string;
        orderIdParam: string;
      };
    };
    responses: {
      /** @description OK */
      204: never;
      404: components['responses']['404-NotFound'];
      409: components['responses']['405-NotAllowed'];
    };
  };
  confirmPaymentReceived: {
    /**
     * Confirm payment received
     * @description Confirm that the order was payed by this Carrier's Customer. This endpoint finalizes the order and successfuly closes it.
     */
    parameters: {
      path: {
        companyId: string;
        orderId: string;
      };
    };
    requestBody?: {
      content: {
        'application/json': components['schemas']['OrderPaymentReceiptInfo'];
      };
    };
    responses: {
      /** @description The order payment receipt has been successfully recorded and the order has been finalized. Great job! */
      200: never;
    };
  };
  confirmUpload: {
    /**
     * Complete an uploadId
     * @description Confirms a document upload is finished and successful.
     */
    parameters: {
      /** @description Company id */
      /** @description Order id */
      /** @description Document id */
      path: {
        companyId: string;
        documentId: string;
        orderId: string;
      };
    };
    requestBody?: {
      content: {
        'application/json': {
          creditNoteDate?: components['schemas']['date-time'];
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': boolean;
        };
      };
      400: components['responses']['400-RejectRequest'];
      404: components['responses']['404-NotFound'];
    };
  };
  createAccountCompanyId: {
    /** Allocate new account company id */
    requestBody?: {
      content: {
        'application/json': Record<string, unknown> | null;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': {
            accountCompanyId: string;
          };
        };
      };
    };
  };
  createNewCustomer: {
    /** Create a new Customer */
    parameters: {
      /** @description Company id */
      path: {
        companyId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          form: components['schemas']['CustomerCompany'];
        };
      };
    };
    responses: {
      /** @description OK */
      201: {
        content: {
          'application/json': {
            customerCompany?: components['schemas']['CustomerCompany'];
          };
        };
      };
      400: components['responses']['400-RejectRequest'];
    };
  };
  createNewOrder: {
    /** Create a new order */
    parameters: {
      /** @description Company id */
      path: {
        companyIdParam: string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          contacts?: {
            bookkeepingContact?: components['schemas']['CustomerCompanyContact'];
            dispositionContact?: components['schemas']['CustomerCompanyContact'];
          };
          customerId: string;
        };
      };
    };
    responses: {
      /** @description OK */
      201: {
        content: {
          'application/json': {
            orderId: string;
            orderVersion: number;
          };
        };
      };
      400: components['responses']['400-RejectRequest'];
    };
  };
  createNewPrivateCustomerContact: {
    /** Create a new Customer Contact */
    parameters: {
      /** @description Company id */
      /** @description Customer id */
      path: {
        companyIdParam: string;
        customerIdParam: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CustomerCompanyContact'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['CustomerCompanyContact'];
        };
      };
      400: components['responses']['400-RejectRequest'];
    };
  };
  deleteCurrentCompanyLogo: {
    /** Delete the current company logo */
    parameters: {
      /** @description Company id */
      path: {
        companyIdParam: string;
      };
    };
    responses: {
      /** @description The Logo successfully removed */
      204: never;
    };
  };
  deleteDocumentById: {
    /** Delete a document by id */
    parameters: {
      /** @description Company id */
      /** @description Order id */
      /** @description Document id */
      path: {
        companyId: string;
        documentId: string;
        orderId: string;
      };
    };
    responses: {
      /** @description The deletion is successful. */
      204: {
        content: {
          'application/json': boolean;
        };
      };
    };
  };
  generateDocument: {
    /**
     * Generate a document using information in the system.
     * @description Request a document generation of a specific type of document. Each document requires different data set so preliminary data validation will be done on the API call. In case of errors api would return a 400 BAD REQUEST. It is currently possible to generate only an Order Confirmation or an Invoice.
     */
    parameters: {
      /** @description Company id */
      /** @description Order id */
      path: {
        companyId: string;
        orderId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          documentType: components['schemas']['GeneratedDocumentType'];
          invoiceNumber?: string;
        };
      };
    };
    responses: {
      /** @description OK */
      201: {
        content: {
          'application/json': {
            documentId?: string;
          };
        };
      };
      400: components['responses']['400-RejectRequest'];
      404: components['responses']['404-NotFound'];
    };
  };
  getCompanyForAccount: {
    /** Get account company basic details */
    parameters: {
      /** @description Company id */
      path: {
        companyIdParam: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['AccountCompany'];
        };
      };
    };
  };
  getCountries: {
    /** Get country codes */
    parameters?: {
      /** @description Filter by forDebtor */
      query?: {
        forDebtor?: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['Country'][];
        };
      };
    };
  };
  getCustomer: {
    /** Get Customer Company Details */
    parameters: {
      /** @description Company id */
      /** @description Customer id */
      path: {
        companyIdParam: string;
        customerIdParam: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['CustomerCompany'];
        };
      };
    };
  };
  getCustomerContact: {
    /** Get Customer Contact */
    parameters: {
      /** @description Company id */
      /** @description Customer id */
      /** @description Contact id */
      path: {
        companyIdParam: string;
        contactIdParam: string;
        customerIdParam: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['CustomerCompanyContact'];
        };
      };
    };
  };
  getCustomerContacts: {
    /** Get Customer Contacts */
    parameters: {
      /** @description Company id */
      /** @description Customer id */
      path: {
        companyIdParam: string;
        customerIdParam: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['CustomerCompanyContact'][];
        };
      };
    };
  };
  getDownloadLink: {
    /** Get a download link for the document */
    parameters: {
      path: {
        companyId: string;
        documentId: string;
        orderId: string;
      };
    };
    responses: {
      /** @description The comprehensive information for downloading, parsing and reading the document is provided. */
      200: {
        content: {
          'application/json': components['schemas']['DownloadFileLink'];
        };
      };
      404: components['responses']['404-NotFound'];
    };
  };
  getLegalForms: {
    /** Get the legal forms for a country code */
    parameters: {
      /** @description Country code */
      path: {
        countryCode: string;
      };
      /** @description Filter by availableForTrader */
/** @description Filter by availableForDebtor */
      query?: {
        availableForDebtor?: boolean;
        availableForTrader?: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['LegalForm'][];
        };
      };
    };
  };
  requestCompanyLogoUploadUrl: {
    /** Request an upload link for the company logo */
    parameters: {
      /** @description Company id */
      path: {
        companyIdParam: string;
      };
    };
    requestBody: {
      content: {
        'application/json': {
          mimeType?: string;
        };
      };
    };
    responses: {
      /** @description The company logo upload url */
      201: {
        content: {
          'application/json': {
            logoUploadLink?: string;
            mimeType?: string;
          };
        };
      };
    };
  };
  sendDocumentByType: {
    /**
     * Send a document via predefined channel
     * @description Send a document with a particular type via a predefined channel. The channel highly depends on the document type itself such as an invoice could be currently sent only via email and only to the Freight Forwarder's disposition email selected on the contacts selection screen.
     */
    parameters: {
      path: {
        companyId: string;
        orderId: string;
      };
    };
    /** @description Used to confirm the document type of the target document that user intends to send. */
    requestBody?: {
      content: {
        'application/json': components['schemas']['SendDocument'];
      };
    };
    responses: {
      /** @description The send request has been accepted by the system and will processed asynchronously. */
      201: {
        content: {
          'application/json': boolean;
        };
      };
    };
  };
  getOrdersList: {
    /** Get the order list */
    parameters: {
      /** @description Company id */
      path: {
        companyIdParam: string;
      };
      /** @description Timestamp to load the orders as of */
/** @description Text search value */
/** @description Number of orders to load */
/** @description The index to load from */
      query: {
        orderAsOfTime: components['schemas']['date-time'];
        search?: string;
        size: number;
        offset: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': {
            isEnd?: boolean;
            orders?: components['schemas']['OrderSummary'][];
            userHasOrders?: boolean;
          };
        };
      };
    };
  };
  getUploadLink: {
    /**
     * Allocate new upload link
     * @description This endpoint allocates a new link that you can use to upload the content of a document. Afterwards when content is uploaded you need to confirm upload success by calling the PUT /account/{companyId}/order/{orderId}/document/{documentId} endpoint with the uploadId from this endpoint's response. This is related to the fact that the aforementioned link can be used multiple times to upload a file. The system wouldn't know when upload is done if the success is not confirmed by the user.
     */
    parameters: {
      /** @description Company id */
      /** @description Order id */
      path: {
        companyId: string;
        orderId: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['FileMetadata'] & {
          documentType: components['schemas']['UploadableDocumentTypes'];
        };
      };
    };
    responses: {
      /** @description OK */
      201: {
        content: {
          'application/json': components['schemas']['UploadFileLink'];
        };
      };
      400: components['responses']['400-RejectRequest'];
      404: components['responses']['404-NotFound'];
    };
  };
  getOrder: {
    /** Get order details */
    parameters: {
      /** @description Company id */
      /** @description Order id */
      path: {
        companyIdParam: string;
        orderIdParam: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['Order'];
        };
      };
    };
  };
  updateOrder: {
    /**
     * Update Order
     * @description Will update items that are allowed in the order (like order details, or the clearing type in workflow). Since the other items (such as files, workflow steps or status) are either calculated or managed by the system, any value in these will be ignored and not used. If the update is on an allowed field, but other issues (like duplicate or updating that field in the current stage of the workflow) will result in the update being rejected.
     */
    parameters: {
      /** @description Company id */
      /** @description Order id */
      path: {
        companyIdParam: string;
        orderIdParam: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OrderDetails'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': boolean;
        };
      };
      400: components['responses']['400-RejectRequest'];
      404: components['responses']['404-NotFound'];
    };
  };
  getPreviousCustomers: {
    /** Get the list of previous customer company names and ids */
    parameters: {
      /** @description Company id */
      path: {
        companyId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['CompanySummaryList'];
        };
      };
    };
  };
  globalCompanySearch: {
    /**
     * Perform a system-wide Company search
     * @description Perform a system-wide Company search. This one may hit external systems in which case the 'companyId' will be empty.
     */
    parameters: {
      /**
       * @description Perform a partial search based on the Company Name, VAT ID or a Registration Number. This parameter must contain at least 3 characters.
       * @example HRA162
       */
      query: {
        query: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['CompanySummaryList'];
        };
      };
    };
  };
  updateCompanyDetails: {
    /** Update company details */
    parameters: {
      /** @description Company id */
      path: {
        companyIdParam: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AccountCompany'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': boolean;
        };
      };
    };
  };
  updatePrivateCustomerContact: {
    /** Update Customer Contact */
    parameters: {
      /** @description Company id */
      /** @description Customer id */
      /** @description Contact id */
      path: {
        companyIdParam: string;
        contactIdParam: string;
        customerIdParam: string;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CustomerCompanyContact'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['CustomerCompanyContact'];
        };
      };
      400: components['responses']['400-RejectRequest'];
    };
  };
  getRegisterAuthorities: {
    /** Get the register authorities for a country code */
    parameters: {
      /** @description Country code */
      path: {
        countryCode: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['RegisterAuthority'][];
        };
      };
    };
  };
  getUser: {
    /** Get the user details for the logged in user */
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['User'];
        };
      };
      /** @description Not found */
      404: never;
    };
  };
  updateUserData: {
    /** Submit new user data. Certain fields will be ignored depending on KYC/etc. */
    /** @description user data */
    requestBody: {
      content: {
        'application/json': components['schemas']['UserProfile'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': boolean;
        };
      };
      400: components['responses']['400-RejectRequest'];
    };
  };
}
